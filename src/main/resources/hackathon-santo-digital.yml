openapi: '3.0.3'
info:
  title: 'Adventure Works'
  version: '0.0.X'
  description: 'Hackathon Santo Digital'
  contact:
    name: Julio Mariano
    email: juliocauan@gmail.com

servers:
  - url: http://localhost:8080
    description: Development Environment

tags:
  - name: 'product'
  - name: 'auth'

paths:
  /signup:
    post:
      tags:
        - 'auth'
      summary: 'Register new user'
      description: 'Check if there is an existing user and save a new one'
      operationId: signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupForm'
      responses:
        '201':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
  /login:
    post:
      tags:
        - 'auth'
      summary: 'User login'
      description: 'Authenticate {username, password} and generate a JWT'
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninForm'
      responses:
        '200':
          description: 'Authenticated successfully!'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserData'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /products:
    post:
      tags:
        - 'product'
      security:
        - BearerAuth: []
      summary: 'Cadastra novo Produto'
      operationId: registerProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPostDTO'
      responses:
        '201':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    get:
      tags:
        - 'product'
      summary: 'Buscar todos os Produtos'
      operationId: getAllProducts
      x-spring-paginated: true
      parameters:
        - name: filter
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ProductFilter'
      responses:
        '200':
          description: 'Lista de Produtos retornada com sucesso!'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductGetDTO'

  /products/{id}:
    get:
      tags:
        - 'product'
      summary: 'Buscar Produto por ID'
      operationId: getProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ProductId'
      responses:
        '200':
          description: 'Produto retornado com sucesso!'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetailsDTO'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - 'product'
      security:
        - BearerAuth: []
      summary: 'Atualiza informações sobre o Produto'
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPutDTO'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - 'product'
      security:
        - BearerAuth: []
      summary: 'Remove Produto'
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ProductId'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  
components:
  schemas:
    ApiError:
      type: object
      required:
        - timestamp
        - message
      properties:
        timestamp:
          type: string
          format: date-time
        message:
          type: string
          example: 'username must be have email format'
        fieldErrors:
          type: array
          items:
            type: string
            example: 'username'
    AuthenticationError:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: 'Full authentication is required to access this resource'
    AuthorizationError:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: 'You do not have the credentials to access this resource'
    OkResponse:
      type: object
      required:
        - 'message'
      properties:
        message:
          type: string
          example: 'Success!'

    ProductId:
      type: integer
      format: int32
    ProductPostDTO:
      type: object
      required:
        - name
        - productNumber
        - safetyStockLevel
        - reorderPoint
        - standardCost
        - listPrice
        - daysToManufacture
        - sellStartDate
      properties:
        name:
          type: string
          minLength: 5
          maxLength: 255
        productNumber:
          type: string
          minLength: 5
          maxLength: 25
        color:
          type: string
          maxLength: 15
        safetyStockLevel:
          type: integer
          format: int32
          minimum: 1
        reorderPoint:
          type: integer
          format: int32
          minimum: 1
        standardCost:
          type: number
          minimum: 0
        listPrice:
          type: number
          minimum: 0
        daysToManufacture:
          type: integer
          format: int32
        sellStartDate:
          type: string
          format: date
    ProductGetDTO:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ProductId'
          readOnly: true
        name:
          type: string
        productNumber:
          type: string
        standardCost:
          type: number
        color:
          type: string
    ProductDetailsDTO:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ProductId'
          readOnly: true
        name:
          type: string
        productNumber:
          type: string
        color:
          type: string
        safetyStockLevel:
          type: integer
          format: int32
        reorderPoint:
          type: integer
          format: int32
        standardCost:
          type: number
        listPrice:
          type: number
        daysToManufacture:
          type: integer
          format: int32
        sellStartDate:
          type: string
          format: date
    ProductPutDTO:
      type: object
      properties:
        color:
          type: string
          maxLength: 15
        safetyStockLevel:
          type: integer
          format: int32
          minimum: 1
        reorderPoint:
          type: integer
          format: int32
          minimum: 1
        standardCost:
          type: number
          minimum: 0
        listPrice:
          type: number
          minimum: 0
        daysToManufacture:
          type: integer
          format: int32
        sellStartDate:
          type: string
          format: date
    ProductFilter:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/OrderEnum'
        productNumber:
          type: string
        standardCost:
          $ref: '#/components/schemas/OrderEnum'
        color:
          type: string
          maxLength: 15
    
    Username:
      type: string
      format: email
      description: 'User e-mail for contact and to redefine lost password [UNIQUE]'
      example: 'example@email.com'
      minLength: 3
      maxLength: 50
    Password:
      type: string
      format: password
      description: 'User password to access account'
      example: '@Password123'
      minLength: 8
      maxLength: 120
    RoleEnum:
      type: string
      enum: ['ADMIN', 'USER']
      description: 'Permissions'
    SigninForm:
          type: object
          required:
            - 'username'
            - 'password'
          properties:
            username:
              $ref: '#/components/schemas/Username'
            password:
              $ref: '#/components/schemas/Password'
    SignupForm:
      type: object
      required:
        - 'username'
        - 'password'
        - 'role'
      properties:
        username:
          $ref: '#/components/schemas/Username'
        password:
          $ref: '#/components/schemas/Password'
        role:
          $ref: '#/components/schemas/RoleEnum'
    UserData:
      type: object
      required:
        - 'roles'
        - 'JWT'
      properties:
        roles:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/RoleEnum'
        JWT:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
    
    OrderEnum:
      type: string
      enum: ['ASC', 'DESC']

  responses:
    OK:
      description: 'Operation successfully finished!'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OkResponse'
    Unauthorized:
      description: 'Operation failed: Not Authenticated!'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthenticationError'
    NotFound:
      description: 'Operation failed: Could not find provided resource!'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    BadRequest:
      description: 'Operation failed: Bad resources provided!'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Forbidden:
      description: 'Operation failed: Not Authorized!'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthorizationError'
  
  securitySchemes:
    BearerAuth:
      scheme: bearer
      type: http
      bearerFormat: JWT
